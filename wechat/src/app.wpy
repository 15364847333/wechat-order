<style lang="less">
@import "./style/weui.wxss";
/**字体图标**/

@font-face {
    font-family: 'iconfont';
    src: url(data:application/font-woff2;charset=utf-8;base64,d09GMgABAAAAAAqwAA0AAAAAE5wAAApbAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP0ZGVE0cGh4GVgCDQhEICpdgkgYLMAABNgIkA0gEIAWFCAeCAhurD1GUaFZO9uPAKbMXI2pIboYTTRsRjs95hGc+62/x7udx0/9zkyC7CQHaEKQ6Zy413xzo3DrVZHPyZAIUakqhnbgDffL/7/b3eGLdvgl+/Zq+FEGYTMYXEIw4/Nhk/9EmBRKyRpzrVNVIFK51SPT9be+/AwktkUAjDwCbyaKmqbVWb9H7R7dB00XjM91j3/e9ezU8WRLxRLXp0CCq3CNiTS1DyrTOUGJkUM+AhSbWOicGAgDKhUDZXWmg0PWVbhC7MgwCPEPsxCTxKqjtAKCJoMNkgLjWUwB8ib8f/TATJQBBNmBxTjj3Y2x5cpt/0JJCRIAZmgnelkGEVKRUxR6AqwrEIAVVF9sFEoECCjaHybAuHBs2hweHU8MZ4fxwebg67AtfCt/8Pun7lh+0kQgIkSz4mUckE2X8i/FX43tjyPjU+Nh417jWuMq42DjVONkQMiwxyACBlY7kEIyHiISI34kA/g0kgFQUidSarwfQlxpAk8d9qFdxKVHb5lCAQL7iEwBJQBQhYrKdf1JO1yGaidJq+1JRLKvS8DhNMw5jRqdmGBPTk2FYhmFiYxkt01XZUc8oGe3yOoztZ73NAFqbWOK7jDEwRWAVmr1n63hsYyzYft/nK0HIavcKTZJf9FndBrfB4HA4nbRK8ptcFRWmRUgsLW2kaekSQNGixcWiz84tcOgcuoVOyS/Ol841lQtl3rP2874KsdJ/Ya68mNlSvcfNWcouYtaqlkDwdmPtPl8FbwvasL2hpASJ/q60v1VndDoXGVe00lo0d/Eil+iXdAudnJNb4LD7xE12BxCCUyrWky4XxnYHRzixPyJFtcpdBGcqpFiZWCw5gVIvOArnIfH6UHz2aizMczhCaHVbOIZkpdDRNOcCZhu4y7iWWHcz5yw3zLjNTjfn4LibGAeDvC3bfVE6Pf86nqx8M4yWzun4UaFQJ3mx9wJWocwQCHQ9dwu2ij6M7V4ghCaalvxokyuIz9R2qgl2c7hBeGvhtM1N9dTTXa3OgJWWGvX64tKSbtjuyn6ACydiSiuGbvkVH9f6eYrDTL++wSf6pSbB2wXZHfXD7MrwtrcfLIHvrKHvC4PhqVM4Rx3v4nmbq8J/QWedXnyhqXxV6JvCYND29q0l8JW1SZoVChUGAtZtfIRrfs3r7LtvE6sDWQ9CU71mzgdBi0Rvks5I7C75fHnsyuA2hsAkg1QkTag2ueycxeayOwSdFdcJXWkQsT1SDKIbxW7YUVgsZqYLWIU1GNws1LYsV5uurb9kdF/somm4bCq9Mr3YOGjnD9ZStV0ec5KpGASv3YcQnuaKfppG9bcD0I1gXw54nFppGnCQ5EeIFrU+QRCb+m1sw5XVq51OwbFNCli08Ja2B2kxxLlQuiJexoz9ofCI3oanlWxMbF2XlXkWsILg0Xm0/NKTficKQzZ2BXdCW2kCuxApbnE3X+yC7V5jwFLV2+3lGngXbwoGx7kwqZLqdVM926bQwIBqEowRg1T96Gn01Ol9NOQMZLEVWhdb+60vY/chslpXZIivMk2OKrjIm8Ychimqyq1z4/fNPV99YDAUxWWGzSfbknvvutBrVwqn+dRzF9u4MZnRmDRGfDHSti3W9LTNfMLo79kifeGhMbuPTZ6+8QOd875UdzXhs25/Bk55UEx2yDTQ6C4t9cUn+PUNuI2DjDBmSXQf9/vu7z19zfEeXs4ddx1FJ3neHfCTu9/8O0/cjazY/weVI8b8oXVXnEk1XT6gJ5d80sid7l3Tt9//oxYbdo5Vj7uXg3WX5yzWffaqR6o+Psnmmiagzhd5gF8ypTy+poO8g6by/Aj6N7qN+Y3HBDNSuQNxG80wyEgnuyv0KF/D8D8dD9Mki27OrD/idM0WLZg7PdW80FxF5qFQFSOratQcdFxnNcdiXkweqZmEFOSTozvPtYXjp/660iilzRBTmJ5jR+TFjG9Oh2Wa15boMY3X4matzlT8U5G5elaU6jLAmF4D9hIKy5yjM7cQhZ36ZS5EB6j7f7yWMKB/nErLzgI81T/pWewLasHOJbJ3XX1kQtLkU22fmMmT6pf2m1v7iobTsBU1bDQNWKRJh2ZDy4puuvknxAGKg6qDikHtb3LX+SYkyw+yB+UFc1ui+3XXJrluLGXNSoZU/vHAf3F/j7nE7DM39U+RE1ZlckD8GfSS4jjqBfWS41ZYQI6jMDnP0ez/LhLLlt1cvX5gzfZ/ro5X/mPvwvDhSuU7AUaMyFvcMkqxmBD8x/eSe0iAEZdifvPI/BU5SX/sjMYvK5qkTA5Fy9BkmLRs2WQ0Tq7vu/9YbUSb1BQEqamgSUntvrh37wJ2THc1L43cj/YjfBm8ZkzPAjx1LDs/VU3l3Muk7uZSGbtmpULqgJ7exqZGb5NXlIErS2waW2UFwfNpn2oW2u27+nfvX7a8DJe6SXYjb5btkl0ezhZqbt8/Q7W39wx55rf289i//TeKnMdl6IzutWRrK0lgbWurfLNu2HCOgz483wc4SJLLkyCuF/VUrX4KIaVWyyE1NOP0r7+ehpD69Vc5zIJIpCYljGBNa6scjXR06c2brDZWy+p58KddbW27jcL9Qf9TW3l8NfrKYf7wleirkPAmbWZt9ubN2TWXs2sBXusv10iqlqrBMHvUf+P/nzRZ5+X42KT4eBiF3qAt+Zt2GjdpNkV9iAKf9PbEI2XypUpl16n/6IVI2Z6rRBaamLjmi45P99Ppg9N2VLRXpMo+yAZ8LM5tvSt8ET1mQMIyNCZmfvjmhP7ZURSl2FDqO7aPbj+rGt9r65hFMGRQ9ifXmzxiHZVLfZzzkcgl1hF5b/7qUoH96fAPhyFxhJtKTOyg8KvERPlm8r9KSNu/v0tLK8vcXFYW1Ul9oViWQvAJy8rRYIP+DezGQlvIT/Yo9KVlT6ernnrtb0qaglPsVSL/joyVJAUASkQMyWmxth0+NEDDJ40+qurQEa7gB2MFSOUZFKB3wgMaEAD23lIScAFstlTda8MX1p16Kl2e3jP5DiAYbCOACOlRPvNO1RnbIETJgggKRYikdABQ7jVIhnYHySm9Q1ivpK9Mi44LCbUDAPQEgBCNHURgzUQkDQaU+wOS4T0iOY0PhNn8O6d1y0r0yZARAsUsaqwmdCFoRBwiByj0AfysgOicTfRPmY4RSg33lYFJBIXVBTL4ImxTgzddEbQRMjlTvWbahCm4ltz76YmpqCCHpegN1zN/rkmZcYEFaZMyzDRWqoMkbELdZtwBm7jrWMhEbl0m4DWEgnlTzRSFvPoseudGdAtI9ncCB7Ak/ZzEikm7I5myY0KUpwq3BlUysujsus5llDtOCIB+6whhetoQiSgkQ3KkQErUAWFEn5ScK4vUSIO0KApFI06+KCDNZkA5bnGkxZkj1a0EqZhdd649SESt3bFZkEsZNNASJszvCjM9NdvFAy616cZHiZ3oOtOFbaZjGbN1nXNQregjbNjk6bNTS2sch+30XXS6tygnNuM5hz2X4+TOxCfvzQQ1DIVmZmAzU8el8M7oc0dzbWzWWdqRYuwM) format('woff2'),
        url(data:application/font-woff;charset=utf-8;base64,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) format('woff');
    font-weight: normal;
    font-style: normal;
}

.iconfont {
  font-family:"iconfont" !important;
  font-size:16px;
  font-style:normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.icon-gouwuchekong:before { content: "\e601"; }

.icon-msnui-sub:before { content: "\e6b9"; }

.icon-weibiaoti103:before { content: "\e61c"; }

.icon-xuanze:before { content: "\e64a"; }

.icon-jian:before { content: "\e643"; }

.icon-weizhi:before { content: "\e628"; }

.icon-shijianzhongbiao2:before { content: "\e811"; }

.icon-dianzan:before { content: "\e615"; }

.icon-tianjia:before { content: "\e634"; }

.icon-renminbi2:before { content: "\e73d"; }

.icon-z-nolike:before { content: "\e6c0"; }

.icon-jian1:before { content: "\e6aa"; }

.icon-webicon308:before { content: "\e69d"; }

.icon-webicon310:before { content: "\e6a1"; }

.icon-qian2:before { content: "\e640"; }

.icon-shanchu:before { content: "\e603"; }

.icon-fanhui:before { content: "\e600"; }

.icon-gengduo:before { content: "\e602"; }

.icon-xuanze_green:before { content: "\e7ad"; }


/************************/
  page{
    background-color: #efeff4;
  }
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
.imgicon{
  height: 1em;
  width:1em;
}

// 颜色
.color-red{
  color: red !important;
}
.color-yellow{
  color: orange !important;
}
.color-blue{
  color: #049BFF !important;
}
.color-green{
  color: #13BA84 !important;
}
.color-333{
  color: #333 !important;
}
.color-666{
  color: #666 !important;
}
.color-gray{
  color:#626E7A !important;
}
.color-999{
  color: #999 !important;
}
.color-ccc{
  color: #ccc !important;
}
.bg-ccc{
  background-color: #ccc !important;
}
.color-bbb{
  color: #bbb !important;
}
.bg-bbb{
  background-color: #bbb !important;
}
.color-ddd{
  color: #ddd !important;
}
.bg-ddd{
  background-color: #ddd !important;
}
.color-pink{
  color:#FF5577 !important;
}
.size-xl{
  font-size:22px !important;
}
.size-l{
  font-size:18px !important;
}
.size-s{
  font-size:14px !important;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/submit',
      'pages/order',
      'pages/address',
      'pages/status'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#13BA84',
      navigationBarTitleText: '医院订餐服务',
      navigationBarTextStyle: '#fff'
    },
    tabBar: {
      color: '#AEADAD',
      selectedColor: '#FF5577',
      backgroundColor: '#fff',
      borderStyle: 'black',
        "list": [{
        pagePath: 'pages/order',
        selectedIconPath: './images/tabbars/active.jpg',
        iconPath: './images/tabbars/icon-mark@2x.png',
        text: '订餐服务'
      },{
        pagePath: 'pages/address',
        selectedIconPath: './images/tabbars/active.jpg',
        iconPath: './images/tabbars/icon-shelf@2x.png',
        text: '新增收货地址'
      }, {
        pagePath: 'pages/status',
        selectedIconPath: './images/tabbars/active.jpg',
        iconPath: './images/tabbars/icon-smile@2x.png',
        text: '订餐成功'
      },{
        pagePath: 'pages/submit',
        selectedIconPath: './images/tabbars/active.jpg',
        iconPath: './images/tabbars/icon-smile@2x.png',
        text: '提交订单'
      }
        ]
    }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  onLaunch() {
    this.testAsync()
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>

